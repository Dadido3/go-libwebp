package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
)

const cFileTemplate = `// Code generated by 'go generate'; DO NOT EDIT.

//go:build cgo

#include "%s"
`

var basePath = filepath.Join(".", "..", "..", "libwebp")

func mustFindFiles(glob string) []string {
	files, err := filepath.Glob(glob)
	if err != nil {
		log.Panicf("Couldn't list files by pattern %q: %v", glob, err)
	}

	return files
}

func removeOldCFiles() {
	for _, filename := range mustFindFiles(filepath.Join(".", "_gen_*.c")) {
		os.Remove(filename)
	}
}

func generateCFiles() {
	// Generate list of C files that need to be compiled.
	// This is roughly based on the cmake files, see the lines following `set(WEBP_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)` in CMakeLists.txt and similar things.
	cFiles := []string{}
	cFiles = append(cFiles, mustFindFiles(filepath.Join(basePath, "src", "dec", "*.c"))...)
	cFiles = append(cFiles, mustFindFiles(filepath.Join(basePath, "src", "demux", "*.c"))...)
	cFiles = append(cFiles, mustFindFiles(filepath.Join(basePath, "src", "dsp", "*.c"))...)
	cFiles = append(cFiles, mustFindFiles(filepath.Join(basePath, "src", "enc", "*.c"))...)
	cFiles = append(cFiles, mustFindFiles(filepath.Join(basePath, "src", "mux", "*.c"))...)
	cFiles = append(cFiles, mustFindFiles(filepath.Join(basePath, "src", "utils", "*.c"))...)
	cFiles = append(cFiles, mustFindFiles(filepath.Join(basePath, "sharpyuv", "*.c"))...)

	for _, cFile := range cFiles {
		relPath, err := filepath.Rel(basePath, cFile)
		if err != nil {
			log.Panicf("Failed to get path %q relative to base path %q: %v", cFile, basePath, err)
		}
		mangledName := "generated_" + strings.ReplaceAll(relPath, string(filepath.Separator), "_")

		os.WriteFile(mangledName, []byte(fmt.Sprintf(cFileTemplate, filepath.ToSlash(relPath))), 0666)
	}
}

func main() {
	removeOldCFiles()
	generateCFiles()
}
